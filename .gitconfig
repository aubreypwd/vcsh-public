[alias]

	# Branch
	b = "! echo $(git branch --show-current)" # Show the current branch.
	cb = "! git b | pbcopy" # Copy the current branch to the clipboard.
	nb = checkout -b # New branch
	db = "! function f() { git branch -D $1; git push origin :$1 ;}; f" # Delete branch.

	# Commit
	c = commit -v # Commit.
	cm = "!f() { git commit -m \"$1\" -m \"$2\"; }; f" # Commit with a message $2 is optional.
	ca = ! git add . && git c
	cf = "!f() { git commit -m \"$1\" -m \"$2\"; }; f" # Commit full (title + body)
	pew = "! function f() { git commit -a --allow-empty-message -m '' && git pb; }; f" # Push an empty commit with all updates (dependant in other packages).

	# Diff
	d = diff
	ds = diff --staged # Diff of staged files.
	du = diff # Diff of unstaged files.
	di = "! git ls-files -m -o --exclude-standard | fzf --reverse --height 10 --print0 -m | xargs -0 -t -o git diff" # Interactive diff.

	# Stage / Unstage
	uaf = "reset" # Unstage all files.
	ufi = "!f() { git diff --name-only --cached | fzf --reverse --height=40% --preview='git diff --color=always --cached -- {}' --print0 -m | xargs -0 -t -o git restore --staged; }; f" # Un-stage (files) interactively with preview.
	sfi = "!f() { git status --porcelain | grep '^[ MARC]M ' | cut -c4- | fzf --reverse --height=40% --preview='git diff --color=always -- {}' --print0 -m | xargs -0 -t -o git add; }; f" # Stage (files) interactively with preview.
	stage = sfi # Shorthand for staging files.
	unstage = ufi # Shorthand for un-staging files.
	ap = add -p # Shorthand for add -p (patch)
	ai = "! git ls-files -m -o --exclude-standard | fzf --reverse --height 10 --print0 -m | xargs -0 -t -o git add -f" # Fuzzy-add modified/untracked files interactively.
	pi = "!f() { file=$(git status --porcelain | awk '$1 ~ /M|\\?\\?/ {print $2}' | fzf --reverse --height=40% --preview='git diff --color=always -- {}'); [ -n \"$file\" ] && git add -p \"$file\"; git ds; }; f" # Patch/stage files interactively.

	# Reset / Clean
	rhh = reset --hard HEAD # Reset easily.
	rhhc = "! git rhh && git clear" # Reset and remove new files.
	clear = clean -df # Just remove new files

	# Fetch / Pull / Push
	f = "fetch"
	p = pull
	pp = push
	pt = push --tags
	get = "! function f() { ghq get \"$1\"; }; f" # Get repo via ghq

	# Tag
	dt = "! function f() { git tag -d $1; git push origin :refs/tags/$1; }; f"
	mt = "! function f() { git dt $1; git tag $1; git push --tags; }; f" # Move tag here.

	# Sparse
	sparse = "!f() { repo=\"$1\"; folder=\"$2\"; branch=\"${3:-master}\"; target=\"${4:-$(basename \"$repo\" .git)}\"; git clone --filter=blob:none --no-checkout --branch \"$branch\" \"$repo\" \"$target\" && cd \"$target\" && git sparse-checkout init --cone && git sparse-checkout set \"$folder\" && git checkout; }; f" # e.g. git sparse git@github.com:use/repo.git sub-folder branch(master) folder(repo).

	# UI
	g = citool --nocommit
	review = g
	r = review
	lg = "! function f() { lazygit; }; f"
	fb = "! /bin/bash -c 'source /Users/aubreypwd/Repos/github.com/aubreypwd/zsh-plugin-fzf-git-branch/fzf-git-branch.plugin.zsh && fzf-git-branch'" # See https://github.com/aubreypwd/zsh-plugin-fzf-git-branch

	# Log
	l = log --oneline --decorate --graph # Better log, looks better in CLI.
	l1 = l -n 1
	l5 = l -n 5
	l10 = l -n 10
	l20 = l -n 20
	l50 = l -n 20
	l100 = l -n 20

	# Status / Misc
	s = status
	stat = status
	stow = "stash --all -m"
	co = checkout

[push]
	default = current
	autoSetupRemote = true

[user]
	name = Aubrey Portwood
	email = code@aubreypwd.com
	signingkey = 8691F6F5E25C5E23

[core]
	excludesfile  = "$HOME/.gitignore"
	editor    = "$EDITOR"
	hooksPath = "$HOME/.githooks"
	# editor        = "micro --clipboard external --infobar false --keepautoindent false --savecursor false --diffgutter false --colorcolumn 72 --ruler false --softwrap true --wordwrap true --eofnewline false --rmtrailingws true"
	# editor        = open -W -a 'CommitEdit'
	# editor        = "/Applications/Komet.app/Contents/MacOS/Komet"

[color]
	ui          = true
	diff        = auto
	status      = auto
	branch      = auto
	interactive = auto
	pager       = true

[credential]
	helper = osxkeychain

[color]
	diff        = auto
	status      = auto
	branch      = auto
	interactive = auto
	ui          = true
	pager       = true

[color "status"]
	added     = green
	changed   = red bold
	untracked = magenta bold

[color "branch"]
	remote = yellow

[gui]
	tabsize = 2
	warndetachedcommit = true
	fontdiff = -family Menlo -size 12 -weight normal -slant roman -underline 0 -overstrike 0

[diff]
	noprefix = true
	tool = juxta

[difftool "meld"]
	trustExitCode = true
	cmd           = open -W -a Meld --args \"$LOCAL\" \"$REMOTE\"

[pager]
	diff = false
	show = false

[mergetool "sublime"]
	cmd           = subl -w $MERGED
	trustExitCode = true

[mergetool "smerge"]
	cmd           = smerge mergetool \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
	trustExitCode = true

[mergetool "meld"]
	cmd           = open -W -a Meld --fresh --new --args --auto-merge \"$PWD/$LOCAL\" \"$PWD/$BASE\" \"$PWD/$REMOTE\" --output=\"$PWD/$MERGED\"
	trustExitCode = true

[mergetool]
	keepBackup = false

[merge]
	tool = juxta
	summary = true

[pull]
	rebase = false

[ghq]
	root = ~/Repos

[filter "lfs"]
	clean    = git-lfs clean -- %f
	smudge   = git-lfs smudge -- %f
	process  = git-lfs filter-process
	required = true

[init]
	defaultBranch = main

[diff "plist"]
	textconv = plutil -convert xml1 -o -

[commit]
	verbose = true
	gpgsign = true

[rerere]
	enabled = true

[branch]
	sort = -committerdate

[column]
	ui = auto

[maintenance]
	repo = /Users/aubreypwd/Repos/github.com/awesomemotive/affiliate-wp
	auto = false
	strategy = incremental

[mergetool "vscode"]
	cmd = "code --new-window --wait --disable-extension shevaua.phpcs --merge  $REMOTE $LOCAL $BASE $MERGED" # 3-way merge.

[mergetool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$REMOTE $PWD/$LOCAL $PWD/$MERGED
	trustExitCode = false

[mergetool "juxta"]
	cmd = juxta _mergetool --base \"${BASE:-/dev/null}\" --local \"$LOCAL\" --remote \"$REMOTE\" --merged \"${MERGED:-/dev/null}\"
	trustExitCode = true

[difftool "juxta"]
	cmd = juxta _difftool --local \"$LOCAL\" --remote \"$REMOTE\" --merged \"$MERGED\"
	trustExitCode = true
[safe]
	directory = /opt/homebrew/Library/Taps/homebrew/homebrew-core
	directory = /opt/homebrew/Library/Taps/homebrew/homebrew-cask
